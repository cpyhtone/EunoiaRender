import { useState } from 'react'
import { Button } from "/components/ui/button"
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "/components/ui/card"
import { Download, Database, Key, Home, Folder, File, Plus, Trash, Edit } from "lucide-react"
import { Input } from "/components/ui/input"
import { Label } from "/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "/components/ui/select"
import { Textarea } from "/components/ui/textarea"

type Tab = 'home' | 'database' | 'api' | 'structure'
type FileItem = {
  id: string
  name: string
  type: 'file' | 'folder'
  content: string
  children?: FileItem[]
}

export default function EunoiaApp() {
  const [isGenerating, setIsGenerating] = useState(false)
  const [downloadUrl, setDownloadUrl] = useState<string | null>(null)
  const [activeTab, setActiveTab] = useState<Tab>('structure')
  const [apiKey, setApiKey] = useState('')
  const [dbConfig, setDbConfig] = useState({
    type: 'postgresql',
    host: 'localhost',
    port: '5432',
    username: '',
    password: '',
    database: ''
  })
  const [projectStructure, setProjectStructure] = useState<FileItem[]>([
    {
      id: '1',
      name: 'src',
      type: 'folder',
      content: '',
      children: [
        {
          id: '2',
          name: 'App.tsx',
          type: 'file',
          content: `import React from 'react'

function App() {
  return (
    <div className="App">
      <h1>Welcome to Eunoia</h1>
    </div>
  )
}

export default App`
        },
        {
          id: '3',
          name: 'index.tsx',
          type: 'file',
          content: `import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
)`
        }
      ]
    },
    {
      id: '4',
      name: 'package.json',
      type: 'file',
      content: JSON.stringify({
        name: "eunoia-project",
        version: "1.0.0",
        scripts: {
          start: "react-scripts start",
          build: "react-scripts build"
        },
        dependencies: {
          react: "^18.2.0",
          "react-dom": "^18.2.0"
        }
      }, null, 2)
    },
    {
      id: '5',
      name: 'README.md',
      type: 'file',
      content: '# Eunoia Project\n\nThis is a sample project generated by Eunoia App'
    }
  ])
  const [newItemName, setNewItemName] = useState('')
  const [newItemType, setNewItemType] = useState<'file' | 'folder'>('file')
  const [selectedPath, setSelectedPath] = useState<string[]>([])
  const [editingItemId, setEditingItemId] = useState<string | null>(null)
  const [editingContent, setEditingContent] = useState('')

  const generateProject = () => {
    setIsGenerating(true)
    
    setTimeout(() => {
      const files = flattenStructure(projectStructure)
      const blob = new Blob([JSON.stringify(files, null, 2)], { type: 'application/json' })
      const url = URL.createObjectURL(blob)
      setDownloadUrl(url)
      setIsGenerating(false)
    }, 1500)
  }

  const flattenStructure = (items: FileItem[], path: string = ''): Record<string, string> => {
    let result: Record<string, string> = {}
    
    items.forEach(item => {
      const currentPath = path ? `${path}/${item.name}` : item.name
      if (item.type === 'file') {
        result[currentPath] = item.content
      } else if (item.children) {
        Object.assign(result, flattenStructure(item.children, currentPath))
      }
    })
    
    return result
  }

  const handleDbChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    setDbConfig(prev => ({ ...prev, [name]: value }))
  }

  const addNewItem = () => {
    if (!newItemName) return

    const newItem: FileItem = {
      id: Date.now().toString(),
      name: newItemName,
      type: newItemType,
      content: newItemType === 'file' ? '' : '',
      ...(newItemType === 'folder' ? { children: [] } : {})
    }

    if (selectedPath.length === 0) {
      setProjectStructure([...projectStructure, newItem])
    } else {
      const updatedStructure = [...projectStructure]
      let currentLevel = updatedStructure

      for (const pathPart of selectedPath) {
        const foundItem = currentLevel.find(item => item.id === pathPart)
        if (foundItem && foundItem.type === 'folder') {
          currentLevel = foundItem.children || []
        }
      }

      currentLevel.push(newItem)
      setProjectStructure(updatedStructure)
    }

    setNewItemName('')
  }

  const removeItem = (id: string, parentPath: string[] = []) => {
    if (parentPath.length === 0) {
      setProjectStructure(projectStructure.filter(item => item.id !== id))
    } else {
      const updatedStructure = [...projectStructure]
      let currentLevel = updatedStructure

      for (const pathPart of parentPath) {
        const foundItem = currentLevel.find(item => item.id === pathPart)
        if (foundItem && foundItem.type === 'folder') {
          currentLevel = foundItem.children || []
        }
      }

      const filtered = currentLevel.filter(item => item.id !== id)
      if (parentPath.length > 0) {
        let parent = updatedStructure
        for (let i = 0; i < parentPath.length - 1; i++) {
          const foundItem = parent.find(item => item.id === parentPath[i])
          if (foundItem && foundItem.type === 'folder') {
            parent = foundItem.children || []
          }
        }
        const lastParent = parent.find(item => item.id === parentPath[parentPath.length - 1])
        if (lastParent && lastParent.type === 'folder') {
          lastParent.children = filtered
        }
      }

      setProjectStructure(updatedStructure)
    }
  }

  const renderStructureItem = (item: FileItem, level: number = 0, parentPath: string[] = []) => {
    const currentPath = [...parentPath, item.id]
    const isSelected = selectedPath.join(',') === currentPath.join(',')
    
    return (
      <div key={item.id} className="pl-4">
        <div 
          className={`flex items-center py-1 px-2 rounded ${isSelected ? 'bg-gray-100' : ''}`}
          onClick={() => setSelectedPath(currentPath)}
        >
          <span className="mr-2">
            {item.type === 'folder' ? <Folder className="h-4 w-4" /> : <File className="h-4 w-4" />}
          </span>
          <span className="flex-1">{item.name}</span>
          <div className="flex space-x-1">
            <button 
              className="text-gray-500 hover:text-primary"
              onClick={(e) => {
                e.stopPropagation()
                setEditingItemId(item.id)
                setEditingContent(item.content)
              }}
            >
              <Edit className="h-4 w-4" />
            </button>
            <button 
              className="text-gray-500 hover:text-destructive"
              onClick={(e) => {
                e.stopPropagation()
                removeItem(item.id, parentPath)
              }}
            >
              <Trash className="h-4 w-4" />
            </button>
          </div>
        </div>
        {item.type === 'folder' && item.children && (
          <div className="border-l-2 border-gray-200 ml-3">
            {item.children.map(child => renderStructureItem(child, level + 1, currentPath))}
          </div>
        )}
      </div>
    )
  }

  const saveContent = () => {
    if (!editingItemId) return

    const updateContent = (items: FileItem[]): FileItem[] => {
      return items.map(item => {
        if (item.id === editingItemId) {
          return { ...item, content: editingContent }
        }
        if (item.type === 'folder' && item.children) {
          return { ...item, children: updateContent(item.children) }
        }
        return item
      })
    }

    setProjectStructure(updateContent(projectStructure))
    setEditingItemId(null)
  }

  const renderTabContent = () => {
    switch (activeTab) {
      case 'home':
        return (
          <div className="space-y-4">
            <p className="text-gray-600">
              Generate a starter project with essential files and structure.
            </p>
          </div>
        )
      case 'database':
        return (
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="dbType">Database Type</Label>
                <Select 
                  value={dbConfig.type}
                  onValueChange={(value) => setDbConfig(prev => ({ ...prev, type: value }))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select database" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="postgresql">PostgreSQL</SelectItem>
                    <SelectItem value="mysql">MySQL</SelectItem>
                    <SelectItem value="mongodb">MongoDB</SelectItem>
                    <SelectItem value="sqlite">SQLite</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <Label htmlFor="host">Host</Label>
                <Input 
                  name="host"
                  value={dbConfig.host}
                  onChange={handleDbChange}
                  placeholder="localhost"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="port">Port</Label>
                <Input 
                  name="port"
                  value={dbConfig.port}
                  onChange={handleDbChange}
                  placeholder="5432"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="database">Database Name</Label>
                <Input 
                  name="database"
                  value={dbConfig.database}
                  onChange={handleDbChange}
                  placeholder="my_database"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="username">Username</Label>
                <Input 
                  name="username"
                  value={dbConfig.username}
                  onChange={handleDbChange}
                  placeholder="db_user"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="password">Password</Label>
                <Input 
                  name="password"
                  type="password"
                  value={dbConfig.password}
                  onChange={handleDbChange}
                  placeholder="••••••••"
                />
              </div>
            </div>
          </div>
        )
      case 'api':
        return (
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="apiKey">API Key</Label>
              <Input 
                value={apiKey}
                onChange={(e) => setApiKey(e.target.value)}
                placeholder="Enter your API key"
              />
            </div>
            <div className="text-sm text-gray-500">
              This key will be saved in the generated project's config/api.json file.
            </div>
          </div>
        )
      case 'structure':
        return (
          <div className="space-y-4">
            <div className="border rounded-lg p-4 bg-gray-50">
              <h3 className="font-medium mb-2">Project Structure</h3>
              <div className="max-h-96 overflow-y-auto mb-4">
                {projectStructure.map(item => renderStructureItem(item))}
              </div>
              
              <div className="flex items-end gap-2">
                <div className="flex-1 space-y-2">
                  <Label>Add new item</Label>
                  <div className="flex gap-2">
                    <Input 
                      value={newItemName}
                      onChange={(e) => setNewItemName(e.target.value)}
                      placeholder={newItemType === 'file' ? 'filename.ext' : 'folder-name'}
                    />
                    <Select 
                      value={newItemType}
                      onValueChange={(value) => setNewItemType(value as 'file' | 'folder')}
                    >
                      <SelectTrigger className="w-[120px]">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="file">File</SelectItem>
                        <SelectItem value="folder">Folder</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                <Button 
                  size="sm" 
                  onClick={addNewItem}
                  disabled={!newItemName}
                >
                  <Plus className="h-4 w-4 mr-1" />
                  Add
                </Button>
              </div>
            </div>

            {editingItemId && (
              <div className="border rounded-lg p-4 bg-gray-50">
                <h3 className="font-medium mb-2">Edit File Content</h3>
                <Textarea 
                  value={editingContent}
                  onChange={(e) => setEditingContent(e.target.value)}
                  className="min-h-[200px] font-mono text-sm"
                />
                <div className="flex justify-end mt-2 space-x-2">
                  <Button 
                    variant="outline" 
                    onClick={() => setEditingItemId(null)}
                  >
                    Cancel
                  </Button>
                  <Button onClick={saveContent}>
                    Save
                  </Button>
                </div>
              </div>
            )}
          </div>
        )
      default:
        return null
    }
  }

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
      <Card className="w-full max-w-4xl">
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-center">Eunoia App</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="flex border-b">
            <button
              className={`flex items-center gap-2 px-4 py-2 ${activeTab === 'home' ? 'border-b-2 border-primary text-primary' : 'text-gray-500'}`}
              onClick={() => setActiveTab('home')}
            >
              <Home className="h-4 w-4" />
              Home
            </button>
            <button
              className={`flex items-center gap-2 px-4 py-2 ${activeTab === 'structure' ? 'border-b-2 border-primary text-primary' : 'text-gray-500'}`}
              onClick={() => setActiveTab('structure')}
            >
              <Folder className="h-4 w-4" />
              Structure
            </button>
            <button
              className={`flex items-center gap-2 px-4 py-2 ${activeTab === 'database' ? 'border-b-2 border-primary text-primary' : 'text-gray-500'}`}
              onClick={() => setActiveTab('database')}
            >
              <Database className="h-4 w-4" />
              Database
            </button>
            <button
              className={`flex items-center gap-2 px-4 py-2 ${activeTab === 'api' ? 'border-b-2 border-primary text-primary' : 'text-gray-500'}`}
              onClick={() => setActiveTab('api')}
            >
              <Key className="h-4 w-4" />
              API Key
            </button>
          </div>

          {renderTabContent()}
        </CardContent>
        <CardFooter className="flex justify-center">
          {downloadUrl ? (
            <a href={downloadUrl} download="eunoia-project.json">
              <Button>
                <Download className="mr-2 h-4 w-4" />
                Download Project
              </Button>
            </a>
          ) : (
            <Button onClick={generateProject} disabled={isGenerating}>
              {isGenerating ? 'Generating...' : 'Generate Project'}
            </Button>
          )}
        </CardFooter>
      </Card>
    </div>
  )
}
